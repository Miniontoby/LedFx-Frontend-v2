self.onmessage=event=>{if(self.postMessage("worker-ready"),event.data.canvas){if(self.canvas=event.data.canvas,self.gl=self.canvas.getContext("webgl")||self.canvas.getContext("experimental-webgl"),!self.gl)return void console.error("WebGL not supported");self.initWebGL()}else if(event.data.pixels){const{pixels,rows,cols}=event.data;self.canvas.width=cols,self.canvas.height=rows,self.gl.viewport(0,0,cols,rows),self.updateTexture(pixels,rows,cols)}},self.initWebGL=()=>{const vertexShader=self.createShader(self.gl.VERTEX_SHADER,"\n    attribute vec2 a_position;\n    attribute vec2 a_texCoord;\n    varying vec2 v_texCoord;\n    void main() {\n      gl_Position = vec4(a_position, 0.0, 1.0);\n      v_texCoord = a_texCoord;\n    }\n  "),fragmentShader=self.createShader(self.gl.FRAGMENT_SHADER,"\n    precision mediump float;\n    varying vec2 v_texCoord;\n    uniform sampler2D u_texture;\n    void main() {\n      gl_FragColor = texture2D(u_texture, v_texCoord);\n    }\n  "),program=self.createProgram(vertexShader,fragmentShader);self.gl.useProgram(program);const positionLocation=self.gl.getAttribLocation(program,"a_position"),texCoordLocation=self.gl.getAttribLocation(program,"a_texCoord"),positionBuffer=self.gl.createBuffer();self.gl.bindBuffer(self.gl.ARRAY_BUFFER,positionBuffer),self.gl.bufferData(self.gl.ARRAY_BUFFER,new Float32Array([-1,-1,1,-1,-1,1,-1,1,1,-1,1,1]),self.gl.STATIC_DRAW);const texCoordBuffer=self.gl.createBuffer();self.gl.bindBuffer(self.gl.ARRAY_BUFFER,texCoordBuffer),self.gl.bufferData(self.gl.ARRAY_BUFFER,new Float32Array([0,1,1,1,0,0,0,0,1,1,1,0]),self.gl.STATIC_DRAW),self.texture=self.gl.createTexture(),self.gl.bindTexture(self.gl.TEXTURE_2D,self.texture),self.gl.texParameteri(self.gl.TEXTURE_2D,self.gl.TEXTURE_WRAP_S,self.gl.CLAMP_TO_EDGE),self.gl.texParameteri(self.gl.TEXTURE_2D,self.gl.TEXTURE_WRAP_T,self.gl.CLAMP_TO_EDGE),self.gl.texParameteri(self.gl.TEXTURE_2D,self.gl.TEXTURE_MIN_FILTER,self.gl.NEAREST),self.gl.texParameteri(self.gl.TEXTURE_2D,self.gl.TEXTURE_MAG_FILTER,self.gl.NEAREST),self.gl.bindBuffer(self.gl.ARRAY_BUFFER,positionBuffer),self.gl.enableVertexAttribArray(positionLocation),self.gl.vertexAttribPointer(positionLocation,2,self.gl.FLOAT,!1,0,0),self.gl.bindBuffer(self.gl.ARRAY_BUFFER,texCoordBuffer),self.gl.enableVertexAttribArray(texCoordLocation),self.gl.vertexAttribPointer(texCoordLocation,2,self.gl.FLOAT,!1,0,0)},self.createShader=(type,source)=>{const shader=self.gl.createShader(type);return self.gl.shaderSource(shader,source),self.gl.compileShader(shader),self.gl.getShaderParameter(shader,self.gl.COMPILE_STATUS)?shader:(console.error("Error compiling shader:",self.gl.getShaderInfoLog(shader)),self.gl.deleteShader(shader),null)},self.createProgram=(vertexShader,fragmentShader)=>{const program=self.gl.createProgram();return self.gl.attachShader(program,vertexShader),self.gl.attachShader(program,fragmentShader),self.gl.linkProgram(program),self.gl.getProgramParameter(program,self.gl.LINK_STATUS)?program:(console.error("Error linking program:",self.gl.getProgramInfoLog(program)),self.gl.deleteProgram(program),null)},self.updateTexture=(pixels,rows,cols)=>{self.gl.bindTexture(self.gl.TEXTURE_2D,self.texture),self.gl.texImage2D(self.gl.TEXTURE_2D,0,self.gl.RGBA,cols,rows,0,self.gl.RGBA,self.gl.UNSIGNED_BYTE,new Uint8Array(pixels.flatMap((p=>[p.r,p.g,p.b,255])))),self.gl.clear(self.gl.COLOR_BUFFER_BIT),self.gl.drawArrays(self.gl.TRIANGLES,0,6)};
//# sourceMappingURL=1794.320b31f6.iframe.bundle.js.map